# To control coverage.py
# See: http://coverage.readthedocs.io/en/latest/config.html

[run]
# whether to measure branch coverage in addition to statement coverage.
branch = True
# whether to measure the Python standard library.
cover_pylib = False
# the name of the data file to use for storing or reporting coverage.
data_file = .coverage
# a list of file name patterns, the files to leave out of measurement or reporting. 
omit =
    */tests/*
# a list of plugin package names.
# This does not seem to find the templates.
# https://github.com/nedbat/django_coverage_plugin
#plugins =
#    django_coverage_plugin

[report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
# ignore source code that can’t be found, emitting a warning instead of an exception.
ignore_errors = True
# a target coverage percentage. If the total coverage measurement is under this 
# value, then exit with a status code of 2.
#fail_under = 50
# Don’t include files that are 100% covered. 
skip_covered = True
# Sort the summary report by the named column. Allowed values are “Name”, “Stmts”, “Miss”, “Branch”, “BrPart”, or “Cover”.
sort = Cover

#[html]
#directory = .buildresults/coverage_report_html
#
#[xml]
#output = .buildresults/coverage_report.xml
